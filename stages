pipeline {
    agent any
    
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/nouman392/JenkinsAssignment.git'
            }
        }
        
        stage('Build') {
            steps {
                echo "Building the code using Maven"
                // Replace with Maven build command
                sh 'mvn clean install'
                mail to: 'noumanali784@gmail.com',
                     subject: 'Build Status',
                     body: 'Build completed successfully. Check logs for details.'
            }
        }
        
        stage('Unit and Integration Tests') {
            steps {
                echo "Running unit tests using JUnit"
                echo "Running integration tests using Selenium"
                // Replace with actual test execution commands
                sh 'mvn test'
            }
        }
        
        stage('Code Analysis') {
            steps {
                echo "Analyzing code using SonarQube"
                // Replace with SonarQube analysis command
                sh 'mvn sonar:sonar'
            }
        }
        
        stage('Security Scan') {
            steps {
                echo "Performing security scan using OWASP ZAP"
                // Replace with OWASP ZAP scan command
                sh 'owasp-zap-cli start'
            }
            post {
                always {
                    mail(
                        to: 'noumanali784@gmail.com',
                        subject: 'Security Scan Status',
                        body: 'Security scan completed with status: ' + currentBuild.result,
                        attachLog: true
                    )
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                echo "Deploying the application to a staging server"
                // Replace with your deployment script
                sh 'deploy_to_staging.sh'
            }
        }
        
        stage('Integration Tests on Staging') {
            steps {
                echo "Running integration tests on the staging environment"
                // Replace with actual test execution commands
                sh 'run_integration_tests.sh'
            }
        }
        
        stage('Deploy to Production') {
            steps {
                echo "Deploying the application to a production server"
                // Replace with your deployment script
                sh 'deploy_to_production.sh'
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            mail(
                to: 'noumanali784@gmail.com',
                subject: 'Pipeline Status: ' + currentBuild.result,
                body: 'The pipeline has finished with status: ' + currentBuild.result,
                attachLog: true
            )
        }
    }
}
